udp有报文边界，所以应用层不用维护消息边界，消息长度就是udp报文长度：
但这必须满足一个条件：一个应用层消息必须放在一个udp报文中，否则应用层仍需要维护消息边界；

udp：服务器端发送一次，客户端一定会接收一次；而且发送和接收的报文一一对应；
tcp:服务端发送的次数和客户端接收的次数不一样，tcp只保证数据可靠的到达接收端，但是客户端每次能接收多少数据是不确定的；

tcp无报文边界，tcp的两端只发送和接收数据，接收方不了解消息何时读完，应用层必须维护消息边界；
维护报文的方法有两种：
定长与变长：如果报文中的字段是变成的，报文就必须携带变成字段的长度类型；
固定格式：只是用于只有一种消息类型，每个字段都是定长字段；
根据消息类型的固定格式：每个消息的第一个字段是一个定长的消息类型字段，根据类型的不同区分后面每个报文的长度；

如果是同步调用，响应消息可以不带type，因为每种类型的请求对应一种类型的回应；
如果是异步调用，响应消息必须携带type，因为消息处理时不知道响应是对那种请求的；

agent <---> peer

1. peer ---> agent:
   | destination-id:4 | data-length:4 | data:data-length |
   id of agent = 0
   
2. agent ---> peer
   | service-id:4 | data-length:4 | data:data-length|
   
 agent as a service:
 request: | type:2 | data |
 response:| type:2 | error-code:2 |
 
 case type: 
      register service: 
      request:  | name-length:2 | name | key-length:2 | key | value-length:2 | value | .... |
      response: | type:2 |error-code:2 |
      unregister service:
      request:  | | 
      response: | type:2 | error-code:2 |
      find-services:
      request:  | length:2 | name-length:2 | name | name-length:2 | name | ... |
      response  | type:2 | error-code:2 | id | id | ... |
 	  list-services:
 	  request:  | |
 	  response  | type:2 | error-code:2 | id | name-length:2 | name | id | name-length:2 | name | ... |
 	  list-connections:
 	  request:  | |
 	  response: | type:2 | error-code:2 | id | id | ... |
 	  list-clients:
 	  request:  | |
 	  response: | type:2 | error-code:2 | id | id | ... |
 	  get-self-id:
 	  request:  | |
 	  response: | type:2 | error-code:2 | id |
 	  set-self-id:
 	  request:  | |
 	  response: | type:2 | error-code:2 |